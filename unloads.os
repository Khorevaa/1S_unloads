#use json
Перем Версия Экспорт;
Перем Настройки;
Перем УровеньОтладки Экспорт;
Перем ФайловаяИБ;
//```````````````````````````````````функции в библиотеку `````````````````
Функция ОбернутьВКавычки(Знач Строка);
	Если Лев(Строка, 1) = """" и Прав(Строка, 1) = """" Тогда
		Возврат Строка;
	Иначе
		Возврат """" + Строка + """";
	КонецЕсли;
КонецФункции

Процедура ДописатьВЛогФайл(СтрокаВЛогФайл, Уровень) Экспорт
	Если ПустаяСтрока(СтрокаВЛогФайл) Тогда
		Возврат;
	КонецЕсли;
	Рапорт 	= Строка(ТекущаяДата()) +" ["+Уровень+"]"+ Символы.Таб + СтрокаВЛогФайл;

	Если УровеньОтладки >= Уровень Тогда
		Сообщить(Рапорт);
	КонецЕсли;

		Протокол = Новый ЗаписьТекста(Настройки.Протокол, "utf-8",, Истина);
		Протокол.ЗаписатьСтроку(Рапорт);
		Протокол.Закрыть();
	

КонецПроцедуры

Функция   ПолучитьПолноеОписаниеОшибки(Ош)
	ТекстОшибки="";
	Пока Ош <> Неопределено Цикл
		Если Ош.Причина <> Неопределено Тогда
			ТекстОшибки = ТекстОшибки +" // "+ Ош.Причина.Описание;
		КонецЕсли;
		Ош = Ош.Причина;
	КонецЦикла;
	Возврат ТекстОшибки;
КонецФункции

Функция   ПолучитьСоединениеСКластером()
	Соединение = Настройки.комМодель;
	Возврат Новый COMОбъект(Соединение);
КонецФункции
Функция   ДескрипторУправленияСеансамиБазы() Экспорт
	
	Перем ComConnector;
	Перем ServerAgent;
	Перем Clusters;
	
	Дескриптор = Новый Структура;
	Дескриптор.Вставить("ServerAgent", Неопределено);
	Дескриптор.Вставить("Cluster", Неопределено);
	Дескриптор.Вставить("ConnectToWorkProcess", Неопределено);
	Дескриптор.Вставить("InfoBase", Неопределено);
	
	АдресАгента = Настройки["клАдрес"] + ":" + Настройки["клПортАгента"];
	ИмяСервера = Настройки["клАдрес"] + ":" + Настройки["клПортМенеджера"];
	ComConnector = ПолучитьСоединениеСКластером();

	Попытка
	
		ДописатьВЛогФайл("Подключение к агенту сервера "+АдресАгента, 2);
		ServerAgent = ComConnector.ConnectAgent(АдресАгента);
		Дескриптор.ServerAgent = ServerAgent;
		
		ДописатьВЛогФайл("Получение массива кластеров сервера у агента сервера", 4);
		Clusters = ServerAgent.GetClusters();
		
		Cluster = НайтиКластерСерверов(Clusters, ИмяСервера);
		ДописатьВЛогФайл("Аутентикация к найденному кластеру: " + Cluster.HostName + ":" + Cluster.MainPort, 4);
		ServerAgent.Authenticate(Cluster, Настройки["клАдмин"], Настройки["клПароль"]);
			
		Дескриптор.Cluster = Cluster;
		Дескриптор.ConnectToWorkProcess = ПолучитьСоединениеСПроцессом(ComConnector, ServerAgent, Cluster);
		Если Дескриптор.ConnectToWorkProcess <> Неопределено Тогда
			InfoBase = НайтиИнформационнуюБазуВРабочемПроцессе(Дескриптор.ConnectToWorkProcess);
			Если Infobase = Неопределено Тогда
				ВызватьИсключение "Не нашли нужную ИБ";
			КонецЕсли;
			
			Дескриптор.InfoBase = InfoBase;
			
		Иначе
			ВызватьИсключение "Нет запущенных рабочих процессов";
		КонецЕсли;
		
	Исключение

		ЗакрытьДескриптор(Дескриптор);
		ОсвободитьОбъектКластера(Clusters);
		ОсвободитьОбъектКластера(ComConnector);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Дескриптор;
	
КонецФункции

Процедура ОсвободитьОбъектКластера(Соединение)
	
	Если Соединение <> Неопределено Тогда
		ОсвободитьОбъект(Соединение);
		Соединение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьДескриптор(Дескриптор) Экспорт

	ОсвободитьОбъектКластера(Дескриптор.ConnectToWorkProcess);
	ОсвободитьОбъектКластера(Дескриптор.Cluster);
	ОсвободитьОбъектКластера(Дескриптор.ServerAgent);
	ОсвободитьОбъектКластера(Дескриптор.InfoBase);

КонецПроцедуры

Функция   НайтиКластерСерверов(Знач Clusters, Знач ИмяСервера)
	
	НашлиКластер = Ложь;
	Для i = 0 По Clusters.Количество()-1 Цикл
		Cluster = Clusters[i];
		Если ВРег(Cluster.HostName) + ":" + Cluster.MainPort = ВРег(ИмяСервера) Тогда
			НашлиКластер = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НашлиКластер Тогда
		ОсвободитьОбъектКластера(Cluster);
		ВызватьИсключение "Ошибка - не нашли кластер <"+ИмяСервера+">";
	КонецЕсли;
	
	Возврат Cluster;
	
КонецФункции

Функция   ПолучитьСоединениеСПроцессом(Знач ComConnector, Знач ServerAgent, Знач Cluster)

	Перем СоединениеСПроцессом;
	НастройкиТекИБ = Настройки["ИБазы"][Настройки.ИБимя];

	Попытка
		
		ДописатьВЛогФайл("Получение списка работающих рабочих процессов и обход в цикле", 4);
			
		WorkingProcesses = ServerAgent.GetWorkingProcesses(Cluster);
			
		Для j = 0 To WorkingProcesses.Количество()-1 Цикл

			Если WorkingProcesses[j].Running = 1 Тогда
				
				СтрокаСоединения = "tcp://" + WorkingProcesses[j].HostName + ":" + WorkingProcesses[j].MainPort;
				ДописатьВЛогФайл("Создание соединения с рабочим процессом " + СтрокаСоединения, 3);
				Попытка
					ConnectToWorkProcess = ComConnector.ConnectWorkingProcess(СтрокаСоединения);
				Исключение
					Инфо = ИнформацияОбОшибке();
					ДописатьВЛогФайл(ПолучитьПолноеОписаниеОшибки(Инфо) ,0);
					Продолжить;
				КонецПопытки;
				ДописатьВЛогФайл("Авторизация в кластере: ["+СтрокаСоединения+"] <"+Настройки["клАдмин"]+">", 4);
				Попытка
					ConnectToWorkProcess.AuthenticateAdmin(""+Настройки["клАдмин"], ""+Настройки["клПароль"]);
				Исключение
					Инфо = ИнформацияОбОшибке();
					ДописатьВЛогФайл(ПолучитьПолноеОписаниеОшибки(Инфо) ,0);
					Продолжить;
				КонецПопытки;
				ДописатьВЛогФайл("Авторизация в раб.процессе:  <"+НастройкиТекИБ["ПользовательИБ"]+">", 4);
				Попытка
				ConnectToWorkProcess.AddAuthentication(""+НастройкиТекИБ["ПользовательИБ"], ""+НастройкиТекИБ["ПарольИБ"]);
				Исключение
					Инфо = ИнформацияОбОшибке();
					ДописатьВЛогФайл(ПолучитьПолноеОписаниеОшибки(Инфо) ,0);
					Продолжить;
				КонецПопытки;
				
				СоединениеСПроцессом = ConnectToWorkProcess;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ОсвободитьОбъектКластера(ConnectToWorkProcess);
		ОсвободитьОбъектКластера(WorkingProcesses);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ОсвободитьОбъектКластера(WorkingProcesses);
	
	Возврат СоединениеСПроцессом;

КонецФункции

Функция   НайтиДескрипторИнформационнойБазы(Знач ServerAgent, Знач Cluster)
	
	ДописатьВЛогФайл("Поиск нужной ИБ для сессии", 2);
	Попытка
	Возврат НайтиИнформационнуюБазуВКоллекции(ServerAgent.GetInfoBases(Cluster));
	Исключение
		Инфо = ИнформацияОбОшибке();
		ДописатьВЛогФайл(ПолучитьПолноеОписаниеОшибки(Инфо) ,0);
	КонецПопытки;
	
КонецФункции

Функция   НайтиИнформационнуюБазуВРабочемПроцессе(Знач ConnectToWorkProcess)
	
	ДописатьВЛогФайл("Поиск ИБ в списке ИБ рабочего процесса", 2);
	Возврат НайтиИнформационнуюБазуВКоллекции(ConnectToWorkProcess.GetInfoBases());
	
КонецФункции

Функция   НайтиИнформационнуюБазуВКоллекции(Знач InfoBases)
	
	Перем InfoBase;
	
	Попытка
		ИскомаяИБ = Настройки.ИБимя;
		БазаНайдена = Ложь;
		InfoBase = ОбойтиКоллекциюИНайтиИБ(InfoBases, ИскомаяИБ);
		
		БазаНайдена = InfoBase <> Неопределено;
		
	Исключение
		ОсвободитьОбъектКластера(InfoBase);
		ОсвободитьОбъектКластера(InfoBases);
		ВызватьИсключение;
	КонецПопытки;
	
	Если Не БазаНайдена Тогда
		InfoBase = Неопределено;
	КонецЕсли;
	
	ОсвободитьОбъектКластера(InfoBases);
	
	Возврат InfoBase;
	
КонецФункции

Функция   ЕстьРаботающиеСеансы(Дескриптор, Знач ТихаяПроверка = Ложь, Знач ИгнорироватьКонсольКластера = Истина) Экспорт
	
	ДописатьВЛогФайл("Проверка наличия открытых сеансов ", 2);
	Попытка
		InfobaseDescriptor = НайтиДескрипторИнформационнойБазы(Дескриптор.ServerAgent, Дескриптор.Cluster);
		Сеансы = Дескриптор.ServerAgent.GetInfoBaseSessions(Дескриптор.Cluster, InfobaseDescriptor);
		ЕстьСеансы = Ложь;
		Для Каждого Сеанс Из Сеансы Цикл
			AppID = Строка(Сеанс.AppID);
			Сообщить(AppID);
////		ДописатьВЛогФайл("From :"+Сеанс.StartedAt+"  User: "+Сеанс.UserName+" AppID: "+ВРег(Сеанс.AppID)+"  SessID: "+Сеанс.SessionID+"  " ,5);
			ОсвободитьОбъектКластера(Сеанс);
			Если ВРег(AppID) <> "COMCONSOLE" Тогда
				ЕстьСеансы = Истина;
				Прервать;
			ИначеЕсли Не ИгнорироватьКонсольКластера Тогда
				ЕстьСеансы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

	ДописатьВЛогФайл("При проверке обнаружено "+Сеансы.Количество()+" сеансов в ИБ "+InfobaseDescriptor.Name, 2);
	
	ОсвободитьОбъектКластера(InfobaseDescriptor);
	Возврат ЕстьСеансы;
КонецФункции


Функция   ОбойтиКоллекциюИНайтиИБ(Знач InfoBases,Знач ИскомаяИБ)
	
	Перем InfoBase;
	БазаНайдена = Ложь;
	ДописатьВЛогФайл("Поиск ИБ " + ИскомаяИБ, 2);
    Для Каждого InfoBase Из InfoBases Цикл
    //    ДописатьВЛогФайл(" Обрабатывается ИБ: " + InfoBase.Name, 3);
        Если НРег(InfoBase.Name) = НРег(ИскомаяИБ) Then
            БазаНайдена = Истина;
            ДописатьВЛогФайл("Нашли нужную ИБ "+ИскомаяИБ, 2);
            Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не БазаНайдена Тогда
		ОсвободитьОбъектКластера(InfoBase);
	КонецЕсли;
	
	Возврат InfoBase;
	
КонецФункции

Процедура ОтключитьСеансыИБлокироватьИБ(ИБ, РежимРаботы) Экспорт
	Перем НомерПопыткиОбработкиИБ;
	Перем МаксимальноеКоличествоПопытокОбработкиИБ;
	КаталогИБ = Новый Файл(Настройки["ИБазы"][ИБ]["АдресИБ"]);
	
	ФайловаяИБ = КаталогИБ.Существует();
	ДописатьВЛогФайл("Определение режима ИБ. Каталог """ + КаталогИБ.ПолноеИмя + """ "+?(ФайловаяИБ, "существует", "не существует"), 6);
	
	ДописатьВЛогФайл("ИБ """+ИБ+""" определена как "+?(ФайловаяИБ, "файловая", "серверная"), 4);
	Если ФайловаяИБ Тогда
			Если РежимРаботы = "BLOCK" Тогда
				ДописатьВЛогФайл("Блокировка файловой ИБ "+ИБ, 2);
				ДописатьВЛогФайл("Попытка создания файла блокировки ИБ 1cv8.cdn", 4);
				ТекстCDN = "{1," + Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss") + "," + Формат(ТекущаяДата()+(60*54), "ДФ=yyyyMMddHHmmss")+",""----------------------------------------------------------------------------------------------------------------------
				|
				| Происходит создание резервной копии информационной базы "+ИБ+"
				|
				| база станет доступной ориентировочно в "+Формат(ТекущаяДата()+(60*54), "ДФ=HH:mm:ss")+"
				|
				|----------------------------------------------------------------------------------------------------------------------
				|
				|"","""+Настройки["КодРазрешенияРаботы"]+""",""""}";
				ФайлСДН = Настройки["ИБазы"][ИБ]["АдресИБ"]+"\1cv8.cdn";
				ЗаписьСДН = Новый ЗаписьТекста(ФайлСДН, "utf-8");
				
				ЗаписьСДН.Записать(ТекстCDN);
				ЗаписьСДН.Закрыть();
			ИначеЕсли РежимРаботы = "FREE" Тогда
				ДописатьВЛогФайл("Снятие блокировки файловой ИБ "+ИБ, 2);
				ФайлСДН = Настройки["ИБазы"][ИБ]["АдресИБ"]+"\1cv8.cdn";
				ДописатьВЛогФайл("Удаление файла блокировки ИБ "+ФайлСДН, 4);
				УдалитьФайлы(ФайлСДН);
			КонецЕсли;
	Иначе // серверная
		НомерПопыткиОбработкиИБ = 0;
		МаксимальноеКоличествоПопытокОбработкиИБ = 5;
	
		Настройки.Вставить("ИБимя", ИБ);
		Если РежимРаботы = "BLOCK" Тогда
		ДописатьВЛогФайл("Блокировка серверной ИБ "+ИБ+"", 0);
			Для ПопыткаОтключения = 1 По МаксимальноеКоличествоПопытокОбработкиИБ Цикл
				Дескриптор = ДескрипторУправленияСеансамиБазы();
				Если ЕстьРаботающиеСеансы(Дескриптор, Истина) Тогда
					Приостановить(10000);
					ДописатьВЛогФайл("№ "+ПопыткаОтключения+"/"+МаксимальноеКоличествоПопытокОбработкиИБ+" попытка...("+ЕстьРаботающиеСеансы(Дескриптор)+")",2);
					ОтключитьПользователей(Дескриптор);
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ЗакрытьДескриптор(Дескриптор);
		ИначеЕсли РежимРаботы = "FREE" Тогда
			ДописатьВЛогФайл("Снятие блокировки серверной ИБ "+ИБ, 2);
			Дескриптор = ДескрипторУправленияСеансамиБазы();	
			УстановитьБлокировкуИнформационнойБазы(Дескриптор, Ложь);
			ЗакрытьДескриптор(Дескриптор);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция   ОтключитьПользователей(Дескриптор)


	Попытка
		УстановитьБлокировкуИнформационнойБазы(Дескриптор);
		Если ЕстьРаботающиеСеансы(Дескриптор, Истина) Тогда
			ПрекратитьСуществующиеСеансы(Дескриптор);
		КонецЕсли;
		
		Если ЕстьРаботающиеСеансы(Дескриптор, Истина) Тогда
			ДописатьВЛогФайл("Критичный сбой: Сеансы все равно не отключены!", 0);
			ВызватьИсключение "Критичный сбой: Сеансы все равно не отключены!";
		КонецЕсли;
		
		СоединенияОтключены = Истина;
	Исключение
		ЗакрытьДескриптор(Дескриптор);
		Инфо = ИнформацияОбОшибке();
		ДописатьВЛогФайл(ПолучитьПолноеОписаниеОшибки(Инфо) ,0);
		СоединенияОтключены = Ложь;
	КонецПопытки;
	

	Если СоединенияОтключены Тогда
		ДописатьВЛогФайл("Соединения с базой " + Настройки.ИБимя + " успешно отключены", 2);
	КонецЕсли;
	
	Возврат СоединенияОтключены;
	
КонецФункции

Процедура ПрекратитьСуществующиеСеансы(Дескриптор) Экспорт
	
	ДописатьВЛогФайл("Отключение сеансов информационной базы", 1);
	InfobaseDescriptor = НайтиДескрипторИнформационнойБазы(Дескриптор.ServerAgent, Дескриптор.Cluster);
	
	Sessions = Дескриптор.ServerAgent.GetInfoBaseSessions(Дескриптор.Cluster, InfobaseDescriptor);
	ДописатьВЛогФайл("Обработка списка сеансов. Длина списка "+Sessions.Количество(), 2);
	
    Для Сч = 0 По Sessions.Количество()-1 Цикл
        Session  = Sessions[Сч];
        UserName = Session.UserName;
        AppID    = ВРег(Session.AppID);
	SessID 	 = Session.SessionID;
//		ConnApp  = Session.Connection.Application;
		
        ДописатьВЛогФайл("Попытка отключения: "+ " ["+SessID+"] Session from "+Session.StartedAt+" User=["+UserName+"] AppID=["+AppID+"]", 3);
        Дескриптор.ServerAgent.TerminateSession(Дескриптор.Cluster, Session);
		ОсвободитьОбъектКластера(Session);
	КонецЦикла;
	
	ОсвободитьОбъектКластера(InfobaseDescriptor);
	ДописатьВЛогФайл("Сеансы завершены", 2);
	
КонецПроцедуры

Процедура УстановитьБлокировкуИнформационнойБазы(Дескриптор, ЗаблокироватьИБ = Истина) Экспорт
	
	InfoBase = Дескриптор.InfoBase;
	НастройкиИБ = Настройки["ИБазы"][InfoBase.Name];
	Если ЗаблокироватьИБ Тогда
		ДописатьВЛогФайл("Установка запрета на подключения к ИБ: " + InfoBase.Name, 2);
		InfoBase.DeniedFrom  	= ТекущаяДата();
		InfoBase.DeniedTo    	= ТекущаяДата() + 2200;
		InfoBase.ConnectDenied 	= Истина;
		InfoBase.ScheduledJobsDenied = Истина;
		InfoBase.DeniedMessage 	= Символы.ПС
			+ Символы.ПС
			+ "Выполняется выгрузка информационной базы. "
			+ Символы.ПС
			+ "База будет недоступна приблизительно до "+Формат(ТекущаяДата()+2200,"ДФ=HH:mm")
			+ Символы.ПС
			+ Символы.ПС;
		InfoBase.PermissionCode = Настройки["КодРазрешенияРаботы"];
		
		Попытка
			Дескриптор.ConnectToWorkProcess.UpdateInfoBase(InfoBase);
		Исключение
			
			Ошибка = ИнформацияОбОшибке();
			ДописатьВЛогФайл("Не удалось заблокировать подключения: <" + ПолучитьПолноеОписаниеОшибки(Ошибка) + "> ", 0);
			ВызватьИсключение "Не удалось заблокировать подключения: <" + ПолучитьПолноеОписаниеОшибки(Ошибка) + ">";
		КонецПопытки;
	Иначе
		ДописатьВЛогФайл("Снятие запрета на подключения к ИБ: " + InfoBase.Name, 2);
		ДописатьВЛогФайл("Восстановление значения флага запрета регл. заданий: " + НастройкиИБ["РегламентныеЗаданияЗапрещены"], 2);
		InfoBase.ConnectDenied = Ложь;
		
		InfoBase.ScheduledJobsDenied = НастройкиИБ["РегламентныеЗаданияЗапрещены"];
		InfoBase.DeniedMessage = "";
		InfoBase.PermissionCode = "";
		
		Попытка
			Дескриптор.ConnectToWorkProcess.UpdateInfoBase(InfoBase);
		Исключение
			Ошибка = ИнформацияОбОшибке();
			ДописатьВЛогФайл("Не удалось снять блокировку с ИБ ["+InfoBase.Name+"]: " + ПолучитьПолноеОписаниеОшибки(Ошибка), 0);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры


Процедура ВыполнитьВыгрузкуИБ(ИБ)
	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить("CONFIG");
	ПараметрыЗапуска.Добавить("/N "+Настройки["ИБазы"][ИБ]["ПользовательИБ"]);
	ПараметрыЗапуска.Добавить("/P "+Настройки["ИБазы"][ИБ]["ПарольИБ"]);
	ПараметрыЗапуска.Добавить("/IBConnectionString """+Настройки["ИБазы"][ИБ]["СтрокаСоединения"]+"""");
	ПараметрыЗапуска.Добавить("/DumpIB "+Настройки["КаталогВыгрузки"]+"\"+ИБ+".dt");
	ПараметрыЗапуска.Добавить("/UC "+Настройки["КодРазрешенияРаботы"]);
	ПараметрыЗапуска.Добавить("/OUT "+ИБ+".log");
	ПараметрыЗапуска.Добавить("/DisableStartupMessages");
	ПараметрыЗапуска.Добавить("/DisableStartupDialogs");
	
	СтрокаЗапуска = ОбернутьВКавычки(Настройки["ПутьПлатформы"]);
	Для каждого прм Из ПараметрыЗапуска Цикл
		СтрокаЗапуска = СтрокаЗапуска+" "+прм;
	КонецЦикла;
	ДописатьВЛогФайл("Запускаем: "+СтрокаЗапуска, 8);	
	КодВозврата = 0;
	СоздатьКаталог(Настройки["КаталогВыгрузки"]);
	Запуститьприложение(СтрокаЗапуска, , Истина, КодВозврата);
	ДописатьВЛогФайл("rc: "+КодВозврата, 8);
КонецПроцедуры

Процедура ОбработатьИБ(ИБ)
	ОтключитьСеансыИБлокироватьИБ(ИБ, "BLOCK");
	ВыполнитьВыгрузкуИБ(ИБ);
	ОтключитьСеансыИБлокироватьИБ(ИБ, "FREE");
КонецПроцедуры

//`````````````````````````````````````````````````````````````````````````
Процедура showparams(Настр, Отступ="")
 			Для Каждого нн Из Настр Цикл
				Сообщить(""+Отступ+"["+нн.Ключ+"] = "+Настр[нн.Ключ]);
				
				
				Если ТипЗнч(нн.Значение) = Тип("Массив") Тогда
					Нпп = 0;
					Для Каждого мм Из нн.Значение Цикл
						Нпп = Нпп +1;
						showparams(мм, " мс["+Нпп+"]: ");
					КонецЦикла;
					ИначеЕсли ТипЗнч(нн.Значение) = Тип("Соответствие") Тогда
						showparams(нн.Значение, Отступ+"  ");
				КонецЕсли;
			КонецЦикла;
КонецПроцедуры

Процедура init()
	СИ = Новый СистемнаяИнформация;
	Скрипт = Новый Файл(ТекущийСценарий().Источник);
	Сообщить("1Scr вер. "+СИ.Версия+"  -----[  "+Скрипт.ИмяБезРасширения+"  ]-----  вер. "+Версия+Символы.ПС);
	Конфиг = Новый Файл(Скрипт.Путь+"\"+Скрипт.ИмяБезРасширения+".json");
	НастройкиИБ  = Новый Структура();
	// ****** /IBConnectionString 
	НастройкиИБ.Вставить("primer1", Новый Структура(
		"АдресИБ, ПользовательИБ, ПарольИБ, РегламентныеЗаданияЗапрещены, СтрокаСоединения", 
		"d:\bases\mmm", "admin", "gfhjkm", Истина, """File=""""C:\bases\uat.tst"""";Ref=""""mc_bnu"""";Usr=""""admin"""";Pwd=""""kzueirf"""";"""));
	НастройкиИБ.Вставить("primer2", Новый Структура(
		"АдресИБ, ПользовательИБ, ПарольИБ, РегламентныеЗаданияЗапрещены, СтрокаСоединения", 
		"192.168.1.1\ttt", "admin1", "pwd", Истина, """Srvr=""""kopt-app-01"""";Ref=""""mc_bnu"""";"""));
	Настройки = Новый Структура(
		"ИБазы, клАдрес, клПортАгента, клПортМенеджера, клАдмин, клПароль, комМодель, ПутьПлатформы, Протокол, КаталогВыгрузки, КодРазрешенияРаботы", 
		НастройкиИБ, "192.168.1.1", "1540", "1541","clAdmin", "clPwd", "V83.COMConnector", "C:\Progra~2\1cv8\common\1cestart.exe", "LOG.LOG", "dt", "0008");
	джон = Новый ПарсерJSON;
	Если Не Конфиг.Существует() Тогда
		СодержимоеФайла = джон.ЗаписатьJSON(Настройки);
		джонсон = Новый ЗаписьТекста(Конфиг.ПолноеИмя);
		джонсон.Записать(СодержимоеФайла);
		джонсон.Закрыть();
		help("Не найден конфигурационный файл. Создан пустой новый "+Конфиг.ПолноеИмя);
	Иначе
		ОбъектДж = джон.ПрочитатьJSON(Новый ЧтениеТекста(Конфиг.ПолноеИмя).Прочитать());
		Если Не ТипЗнч(ОбъектДж) = Тип("Соответствие") Тогда
			help("Неправильная структура файла конфигурации "+Конфиг.ПолноеИмя+" (Тип: "+ ТипЗнч(ОбъектДж)+")");
		КонецЕсли;
		Для Каждого нн Из Настройки Цикл
			Настройки[нн.Ключ] = ОбъектДж[нн.Ключ];
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура help(error = "") Экспорт
	Скрипт = Новый Файл(ТекущийСценарий().Источник);
	Сообщить("
	| Создание файлов выгрузки информационных баз с отключением пользователей и регламентных заданий 
	| Использование:
	|
	|   "+Скрипт.Имя+" 
	|
	| Параметры работы указываются в файле "+Скрипт.ИмяБезРасширения+".json
	|");

	ВызватьИсключение error;
КонецПроцедуры


Процедура act()
	Для Каждого нн из Настройки["ИБазы"] Цикл
		ОбработатьИБ(нн.Ключ);
	КонецЦикла;
КонецПроцедуры
//`````````````````````````````````````````````````````````````````````````
Версия = "0.0.4 vscraft@2015";
УровеньОтладки = 9;
init();
//showparams(Настройки);
act();